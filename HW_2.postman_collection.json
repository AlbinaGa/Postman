{
	"info": {
		"_postman_id": "7053df45-61c6-400b-b588-18ca30b469aa",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Task:\r",
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Task:\r",
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"    let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Anna\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"19\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"console.log(req_name);\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"console.log(req_age);\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"console.log(req_salary);\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_u_salary_1_5_year  = req_salary*4;\r",
							"console.log(\"req_u_salary_1_5_year = \",req_u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json. \r",
							"pm.test(\"Test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql();\r",
							"});\r",
							"// 4. Спарсить request.\r",
							"let jsonData = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = pm.request.url.query.get('name');\r",
							"console.log(req_name);\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = pm.request.url.query.get('age');\r",
							"console.log(req_age);\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = pm.request.url.query.get('salary');\r",
							"console.log(req_salary);\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Test 3\", function () {\r",
							" let jsonData = pm.response.json();\r",
							"      pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Test 4\", function () {\r",
							"let jsonData = pm.response.json();\r",
							"      pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Test 5. Dog's name is Luky\", function () {\r",
							"let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Test 5. Dog's age is 4\", function () {\r",
							"let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Oleg&age=20&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleg"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"pm.test(\"Test 1\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql();\r",
							"});\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = pm.request.url.query.get('name');\r",
							"console.log(req_name);\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = pm.request.url.query.get('age');\r",
							"console.log(req_age);\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = pm.request.url.query.get('salary');\r",
							"console.log(req_salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = pm.response.json().salary;\r",
							"console.log(resp_salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"pm.test(\"Test 2. Salary is 3000\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[0]).to.eql(3000);\r",
							"});\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Test 3. Salary is 6000\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[1]).to.eql(\"6000\");\r",
							"});\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Test 4. Salary is 9000\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[2]).to.eql(\"9000\");\r",
							"});\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							" pm.test(\"Test 5\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let salary_0 = jsonData.salary[0]\r",
							"     pm.expect(jsonData.salary[0]).to.eql(salary_0);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							" pm.test(\"Test 6\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let salary_1 = String(jsonData.salary[0]*2)\r",
							"     pm.expect(jsonData.salary[1]).to.eql(salary_1);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							" pm.test(\"Test 7\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let salary_2 = String(jsonData.salary[0]*3)\r",
							"     pm.expect(jsonData.salary[2]).to.eql(salary_2);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let items = resp_salary.length\r",
							"let count = 0\r",
							"console.log(items)\r",
							"while (count < items) {\r",
							"    console.log(resp_salary[count])\r",
							"    count++\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Elena&age=25&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6. Спарсить response body в json.\r",
							"    let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Test 2\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.json().start_qa_salary);\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Test 2\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.json().qa_salary_after_6_months);\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Test 3\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.json().qa_salary_after_12_months);\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Test 4\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.json()['qa_salary_after_1.5_year']);\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Test 5\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.json()['qa_salary_after_3.5_year']);\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Test 6\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.json().person);\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"console.log(req_salary);\r",
							"pm.test(\"Test 7\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     pm.expect(String(jsonData.start_qa_salary)).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test 8\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let req_salary_6_month = req_salary*2;\r",
							"     pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary_6_month);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Test 9\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let req_salary_12_month = req_salary*2.7;\r",
							"     pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary_12_month);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Test 10\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let req_salary_after_1_5_year = req_salary*3.3;\r",
							"     pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req_salary_after_1_5_year);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Test 11\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let req_salary_after_3_5_year = req_salary*3.8;\r",
							"     pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req_salary_after_3_5_year);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test 12\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let req_salary_after_3_5_year = req_salary*3.8;\r",
							"     pm.expect(String(jsonData.person.u_name[1])).to.eql(req_salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"pm.test(\"Test 13\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     pm.expect(String(jsonData.person.u_age)).to.eql(req_age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Test 13\", function () {\r",
							"     let jsonData = pm.response.json();\r",
							"     let req_u_salary_5_years = req_salary*4.2;\r",
							"     pm.expect(jsonData.person.u_salary_5_years).to.eql(req_u_salary_5_years);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let resp_person = jsonData.person\r",
							"console.log(Object.values(resp_person))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}